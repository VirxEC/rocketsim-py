from enum import Enum
from typing import Optional

from rocketsim import Angle, Vec3

class Team(Enum):
    Blue = 0
    Orange = 1

class GameMode(Enum):
    Soccar = 0

class Ball:
    pos: Vec3
    vel: Vec3
    angvel: Vec3

    def __str__(self) -> str: ...

    def get_pos(self) -> Vec3: ...
    def get_vel(self) -> Vec3: ...
    def get_angvel(self) -> Vec3: ...

class Car:
    pos: Vec3
    vel: Vec3
    angles: Angle
    angvel: Vec3
    boost: float
    is_on_ground: bool
    is_supersonic: bool
    is_jumping: bool
    has_jumped: bool
    has_double_jumped: bool
    has_flipped: bool

    def __str__(self) -> str: ...
    def get_pos(self) -> Vec3: ...
    def get_vel(self) -> Vec3: ...
    def get_angles(self) -> Angle: ...
    def get_angvel(self) -> Vec3: ...

class CarConfig:
    @staticmethod
    def octane() -> CarConfig: ...

    @staticmethod
    def dominus() -> CarConfig: ...

    @staticmethod
    def plank() -> CarConfig: ...

    @staticmethod
    def breakout() -> CarConfig: ...

    @staticmethod
    def hybrid() -> CarConfig: ...

    @staticmethod
    def merc() -> CarConfig: ...

class Arena:
    ball: Ball

    def __init__(gamemode: GameMode, tick_rate: Optional[float] = 120) -> Arena: ...
    def get_tick_rate(self) -> float: ...
    def get_ball(self) -> Ball: ...
    def add_car(self, team: Team, config: CarConfig) -> int: ...
    def get_car(self, id: int) -> Car: ...
    def set_car(self, id: int, car: Car) -> None: ...
    def step(self, ticks_to_simulate: int = 1) -> None: ...
